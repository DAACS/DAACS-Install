#!/bin/bash
current_dir="$(dirname $0)"

if [ "$current_dir" = "." ]; then 
    current_dir=`pwd`
fi

source "$current_dir/instance_helpers/colors.sh"

main(){
        
    step1_option=$(pretty_read "
        Type ${Color_Off}${Red}ctrl+c${Color_Off}  or type ${Red}quit${Color_Off} to exit\n
        1 - Install system dependencies\n
        2 - Create system users\n
        3 - Create/Update/Refresh instance\n
        4 - Reset service\n
        5 - Recreate service\n\n
        Select an option:  ")

    if [ "$step1_option" = "" ]; then
        echo "must select an option"
    fi


    if [ "$step1_option" = "quit" ]; then
        echo "Good bye"
        exit 1
    fi


    case "$step1_option" in
    "1") 
        clear
        source "$current_dir/DAACS-system-install.sh"

    ;;

    "2") 
        clear
        source "$current_dir/create_system_instance_users.sh"

    ;;

    "3") 
        clear
        source "$current_dir/create_daacs_instance.sh"

    ;;

    "4") 
        clear
        source "$current_dir/instance_helpers/basic.sh"
    
        service_name=$(ask_read_question_or_try_again "Service name? : " true)
        stagger_amount=$(ask_read_question_or_try_again "How many services to restart at once? : " true)

        if [[ ! $stagger_amount =~ ^[0-9]+$ ]] ; then
            
            printf "Stagger amount must be a number\n"
        else
            restart_services_with_stagger_by_service_name "$service_name" "$stagger_amount"
        fi

        
    ;;

    "5")

        source "$current_dir/instance_helpers/basic.sh"

        # 1 - DAACS-Website
        # 2 - DAACS-Qserver
        # 3 - DAACS-Nginx
        # 4 - DAACS-Backup 
        # 5 - DAACS-Memcached
        base_path_folder_destination=$(ask_read_question_or_try_again "Enter absolute path destination for install of DAACS: " true)
        install_folder_destination=$(ask_read_question_or_try_again "Enter folder destination for install of DAACS: " true)

read -p "
1 - DAACS-Website
2 - DAACS-Qserver
3 - DAACS-Nginx
4 - DAACS-Backup 
5 - DAACS-Memcached
Select instance type to create: " instance_type
        environment_type=$(ask_read_question_or_try_again "Environment type (dev, qa, prod, etc, etc): " true)
        service_name=$(ask_read_question_or_try_again "Service name? : " true)

        recreate_service "$service_name" "$base_path_folder_destination" "$install_folder_destination" "$instance_type" "$environment_type"
        
    ;;

    *)
        echo "Invalid option"
        main

    ;;
    esac
    main

}



helpFunction()
{
   echo ""
   echo "Usage: $0 -f refresh -s service_name -a 2 -q true "
   echo -e "\t-f Function to run (refresh)"
   echo -e "\t-s Service name to run function on"
   echo -e "\t-a The amount of times to sequence function"
   echo -e "\t-q Quite mode: (Output or no output )"
   exit 1 # Exit script after printing help
}

while getopts "f:s:a:q:b:d:t:i:e:" opt
do
   case "$opt" in
      f ) parameterF="$OPTARG" ;;
      s ) parameterS="$OPTARG" ;;
      a ) parameterA="$OPTARG" ;;
      q ) parameterQ="$OPTARG" ;;
      b ) parameterB="$OPTARG" ;;
      d ) parameterD="$OPTARG" ;;
      t ) parameterT="$OPTARG" ;;
      i ) parameterI="$OPTARG" ;;
      e ) parameterE="$OPTARG" ;;
      ? ) helpFunction ;; # Print helpFunction in case parameter is non-existent
   esac
done
#example
#daacs -f refresh -s testweb -a 2
#daacs -f recreate -s devweb -b /home/vagrant -d daacsdev -t 1 -e dev

if  [[ -z "$parameterF" ]] && [[ -z "$parameterS" ]];
then
    main
else

    if [[ "$parameterA" == "" ]]; then
        parameterA=1
    fi


    if [[ "$parameterQ" == "true" ]]; then
        parameterQ=true
    elif [[ "$parameterQ" == "false" ]]; then
        parameterQ=false
    else
        parameterQ=true
    fi

    # Begin script in case all parameters are correct
    if [[ "$parameterS" == "help" ]]  ; then
        helpFunction
    else


        case "$parameterF" in
            
            "refresh") 
                printf "Running refresh on ${parameterS} \n"
                source "$current_dir/instance_helpers/basic.sh"
                restart_services_with_stagger_by_service_name "$parameterS" "$parameterA" $parameterQ

            ;;

            "recreate") 

                printf "Running recreate on ${parameterS} \n"
                source "$current_dir/instance_helpers/basic.sh"
                recreate_service "$parameterS" "$parameterB" "$parameterD" "$parameterT" "$parameterE"
            ;;

        esac
    fi
fi



exit 1



